using System;
using System.Linq;
using ChessChallenge.API;

public class MyBot : IChessBot
{
    public Move Think(Board board, Timer timer)
    {
        // Board testBoard = Board.CreateBoardFromFEN("1k1r3r/p1pp1p2/1p4p1/n2bP2p/1qP5/3B1NQ1/P2N1PPP/K2RR3 b - - 2 20");
        
        var moveScore = board.GetLegalMoves()
            .Select(move => (
                    move: move,
                    score: -board.MakeMove(move, board => ScoreOf(board))
                )
            )
            .Select(moveScore => {
                Console.WriteLine($"{moveScore.move} \t Score: {moveScore.score}");
                return moveScore;
            })
            .MaxBy(moveScore => moveScore.score);

        Console.WriteLine($"Chose {moveScore.move.ToString()[6..]} for a score of {moveScore.score}");
        Console.WriteLine($"\n");
        
        return moveScore.move;
    }

    int ScoreOf(Board board)
    {
        return Enumerable.Range(0, 64)
            .Select(squareIndex => new Square(squareIndex))
            .Select(square => ScoreOf(square, board))
            .Sum() * (board.IsWhiteToMove ? 1 : -1);
    }

    int ScoreOf(Square square, Board board)
    {
        return new[] { 0, 100, 320, 330, 500, 900, 0 } [(int)board.GetPiece(square).PieceType]
            * (board.GetPiece(square).IsWhite ? 1 : -1);
    }
}

public static class Extensions
{
    public static T MakeMove<T>(this Board board, Move move, Func<Board, T> func)
    {
        board.MakeMove(move);
        T value = func(board);
        board.UndoMove(move);
        // Console.WriteLine($"{move} \t Score: {value}");
        return value;
    }
}